import os
import sys
from prompt_toolkit.keys import Keys
from prompt_toolkit.filters import (Condition, IsMultiline, HasSelection, EmacsInsertMode, ViInsertMode)

$VI_MODE = True
$IGNOREEOF = True
$INDENT = "    "
$CASE_SENSITIVE_COMPLETIONS = True
$COMPLETIONS_CONFIRM = True
$XONSH_AUTOPAIR = True
$AUTO_CD = True
$XONSH_SHOW_TRACEBACK = False
$HISTCONTROL = 'ignoredups'

# xontribs
xontrib load z
xontrib load docker_tabcomplete
xontrib load fzf-widgets

# パス
$GOPATH = $HOME
$PATH.append(os.path.join($GOPATH[0], 'bin'))
$PATH.append(os.path.join($HOME, 'src/bin/google-cloud-sdk/bin'))

def get_history(session_history=None, return_list=False):
    """履歴をpecoに流す"""
    import json
    from collections import OrderedDict
    from operator import itemgetter

    hist_dir = __xonsh__.env['XONSH_DATA_DIR']
    files = [ os.path.join(hist_dir,f) for f in os.listdir(hist_dir)
              if f.startswith('xonsh-') and f.endswith('.json') ]
    file_hist = [ json.load(open(f))['data']['cmds'] for f in files ]
    cmds = [ ( c['inp'].replace('\n', ''), c['ts'][0] )
                 for cmds in file_hist for c in cmds if c]
    cmds.sort(key=itemgetter(1))
    cmds = [ c[0] for c in cmds[::-1] ]
    if session_history:
        cmds.extend(session_history)

    zip_with_dummy = list(zip(cmds, [0] * len(cmds)))[::-1]
    cmds = list(OrderedDict(zip_with_dummy).keys())[::-1]
    if return_list:
        return cmds
    else:
        return '\n'.join(cmds)

def get_ssh():
    """sshをpecoに流す"""
    items = re.sub(r'(?i)host ', '', $(cat ~/.ssh/config /etc/ssh/ssh_config | grep -i '^host'))
    return items

def get_git_user():
    return $(git config user.name).strip()

# キーバインド
@events.on_ptk_create
def custom_keybindings(bindings, **kw):
    # ptk 2.xでは @bindings.add('c-v') とする
    # コマンド入力中にctrl+vでvim編集
    @bindings.add('c-v')
    def edit_in_editor(event):
        event.current_buffer.tempfile_suffix = '.py'
        event.current_buffer.open_in_editor(event.cli)

    # ctrl+rで履歴をpecoに流して検索
    @bindings.add('c-r')
    def select_history(event):
        sess_history = $(history).split('\n')
        hist = get_history(sess_history)
        selected = $(echo @(hist) | peco)
        event.current_buffer.insert_text(selected.strip())

    # ctrl+sでssh先をpeco
    @bindings.add('c-s')
    def select_ssh(event):
        hosts = '\n'.join([x for x in get_ssh().split('\n') if x!='*' and 'HostKey' not in x])
        selected = $(echo @(hosts) | peco)
        if selected:
            event.current_buffer.insert_text('ssh ' + selected.strip())

# エイリアス
aliases['vi'] = 'nvim'
aliases['la'] = 'ls -latr'
aliases['dc'] = 'docker compose'
aliases['vt'] = 'vi ~/.tmux.conf'
aliases['vx'] = 'vi ~/.xonshrc'
aliases['vv'] = 'vi ~/.vimrc'
aliases['vz'] = 'vi ~/.zshrc'

# 見た目
$PROMPT = "\n{BOLD_BLUE}"+get_git_user()+" {BOLD_INTENSE_YELLOW}{cwd}{branch_color}{curr_branch: {}}{BOLD_GREEN} ❯ "
$RIGHT_PROMPT = "\n{gitstatus: {} }"
$PTK_STYLE_OVERRIDES={
    "completion-menu": "bg:ansiblack ansiwhite",
    "completion-menu.completion": "bg:ansiblack",
    "completion-menu.completion.current": "bg:ansiwhite ansiblack",
    "scrollbar.background": "bg:ansibrightblack",
    "scrollbar.arrow": "bg:ansiblack ansiwhite bold" ,
    "scrollbar.button": "bg:ansiblack",
    "auto-suggestion": "ansibrightblack",
    "aborting": "ansibrightblack",
}
$LS_COLORS = "di=34:ln=35:so=32:pi=33:ex=31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30"
